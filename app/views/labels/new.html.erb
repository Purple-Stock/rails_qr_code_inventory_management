<div class="container mx-auto px-4 py-8">
  <div class="flex flex-col space-y-8">
    <%# Header Section %>
    <div class="flex justify-between items-center bg-white p-6 rounded-lg shadow">
      <div>
        <h1 class="text-2xl font-bold text-gray-900"><%= t('labels.new.title') %></h1>
        <p class="mt-1 text-sm text-gray-500"><%= t('labels.new.subtitle') %></p>
      </div>
      <div class="flex space-x-3">
        <%= form_tag generate_team_labels_path(@team, format: :pdf), method: :post, target: '_blank', class: 'inline', id: 'print-form' do %>
          <%= hidden_field_tag :label_type %>
          <%= hidden_field_tag :item_ids %>
          <%= hidden_field_tag :copies %>
          <%= button_tag type: 'submit', 
              class: "inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed", 
              onclick: "updateAndSubmit('print-form'); return false;",
              id: 'print-button',
              disabled: true do %>
            <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"/>
            </svg>
            <%= t('labels.new.print_labels') %>
          <% end %>
        <% end %>

        <%= form_tag generate_team_labels_path(@team, format: :pdf), method: :post, class: 'inline', id: 'download-form' do %>
          <%= hidden_field_tag :label_type %>
          <%= hidden_field_tag :item_ids %>
          <%= hidden_field_tag :copies %>
          <%= button_tag type: 'submit', 
              class: "inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed", 
              onclick: "updateAndSubmit('download-form'); return false;",
              id: 'download-button',
              disabled: true do %>
            <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"/>
            </svg>
            <%= t('labels.new.download_pdf') %>
          <% end %>
        <% end %>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <%# Label Design Options %>
      <div class="bg-white rounded-lg shadow divide-y divide-gray-200">
        <div class="p-6">
          <h2 class="text-lg font-medium text-gray-900"><%= t('labels.new.label_design.title') %></h2>
          <p class="mt-1 text-sm text-gray-500"><%= t('labels.new.label_design.subtitle') %></p>
          <div class="mt-6 space-y-6">
            <div class="space-y-2">
              <%= form_tag preview_team_labels_path(@team), method: :post, data: { turbo_frame: "preview" } do %>
                <%= label_tag :label_type, t('labels.new.label_design.label_type'), class: "block text-sm font-medium text-gray-700" %>
                <%= select_tag :label_type, 
                    options_for_select([
                      [t('labels.new.label_design.options.qr'), 'qr'],
                      [t('labels.new.label_design.options.barcode'), 'barcode'],
                      [t('labels.new.label_design.options.hybrid'), 'hybrid']
                    ]),
                    class: "mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-500 focus:border-purple-500 rounded-md",
                    onchange: "this.form.requestSubmit()" %>
                
                <%# Hidden checkboxes state %>
                <div id="selected-items-container"></div>
              <% end %>
            </div>
          </div>
        </div>
      </div>

      <%# Item Selection %>
      <div class="lg:col-span-2">
        <div class="bg-white rounded-lg shadow">
          <div class="p-6">
            <div class="flex justify-between items-center mb-6">
              <div>
                <h2 class="text-lg font-medium text-gray-900"><%= t('labels.new.select_items.title') %></h2>
                <p class="mt-1 text-sm text-gray-500"><%= t('labels.new.select_items.subtitle') %></p>
              </div>
              <div class="relative">
                <input type="text" 
                       id="item-search" 
                       placeholder="<%= t('labels.new.select_items.search_placeholder') %>" 
                       class="block w-64 rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500 sm:text-sm pl-10"
                       oninput="filterItems(this.value)">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                  </svg>
                </div>
              </div>
            </div>
            <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 rounded-lg">
              <table class="min-w-full divide-y divide-gray-300">
                <thead class="bg-gray-50">
                  <tr>
                    <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"><%= t('labels.new.select_items.table.select') %></th>
                    <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"><%= t('labels.new.select_items.table.item') %></th>
                    <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"><%= t('labels.new.select_items.table.sku') %></th>
                    <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"><%= t('labels.new.select_items.table.copies') %></th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 bg-white" id="items-table-body">
                  <% @items.each do |item| %>
                    <tr class="item-row" data-name="<%= item.name.downcase %>" data-sku="<%= item.sku.to_s.downcase %>">
                      <td class="whitespace-nowrap px-3 py-4 text-sm">
                        <%= check_box_tag "item_ids[]", 
                            item.id, 
                            false, 
                            class: "h-4 w-4 rounded border-gray-300 text-purple-600 focus:ring-purple-500",
                            onchange: "updatePreview(this)" %>
                      </td>
                      <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-900"><%= item.name %></td>
                      <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500"><%= item.sku %></td>
                      <td class="whitespace-nowrap px-3 py-4 text-sm">
                        <%= number_field_tag "copies[#{item.id}]",
                            1,
                            min: 1,
                            class: "block w-20 rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500 sm:text-sm" %>
                      </td>
                    </tr>
                  <% end %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
function updatePreview(checkbox) {
  // Get all selected items
  const selectedItems = Array.from(document.querySelectorAll('input[name="item_ids[]"]:checked'))
    .map(cb => cb.value);
  
  // Update button states
  updateButtonStates(selectedItems.length > 0);
  
  // Get the current label type
  const labelType = document.querySelector('select[name="label_type"]').value;
  // Get the form
  const form = document.querySelector('form[data-turbo-frame="preview"]');
  // Clear existing hidden inputs
  const container = document.getElementById('selected-items-container');
  container.innerHTML = '';
  // Add hidden inputs for each selected item
  selectedItems.forEach(itemId => {
    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = 'item_ids[]';
    input.value = itemId;
    container.appendChild(input);
  });
  // No preview update needed
}

function updateButtonStates(enabled) {
  const printButton = document.getElementById('print-button');
  const downloadButton = document.getElementById('download-button');
  
  printButton.disabled = !enabled;
  downloadButton.disabled = !enabled;
}

function updateAndSubmit(formId) {
  // Get values from checkboxes
  const selectedItems = Array.from(document.querySelectorAll('input[name="item_ids[]"]:checked'))
    .map(checkbox => checkbox.value);
  
  // Get the label type
  const labelType = document.querySelector('select[name="label_type"]').value;
  
  // Get the copies for each selected item
  const copies = selectedItems.map(itemId => {
    const input = document.querySelector(`input[name="copies[${itemId}]"]`);
    return input ? input.value : '1';
  });
  
  // Update the target form
  const form = document.getElementById(formId);
  form.querySelector('input[name="label_type"]').value = labelType;
  form.querySelector('input[name="item_ids"]').value = selectedItems.join(',');
  form.querySelector('input[name="copies"]').value = copies.join(',');
  
  // Submit the form
  form.submit();
}

function filterItems(searchTerm) {
  searchTerm = searchTerm.toLowerCase();
  const rows = document.querySelectorAll('.item-row');
  let hasVisibleRows = false;
  rows.forEach(row => {
    const name = row.dataset.name;
    const sku = row.dataset.sku;
    const matches = name.includes(searchTerm) || sku.includes(searchTerm);
    row.style.display = matches ? '' : 'none';
    if (matches) hasVisibleRows = true;
  });
  // Show or hide "no results" message
  let noResultsRow = document.getElementById('no-results-row');
  if (!hasVisibleRows) {
    if (!noResultsRow) {
      noResultsRow = document.createElement('tr');
      noResultsRow.id = 'no-results-row';
      noResultsRow.innerHTML = `
        <td colspan="4" class="px-3 py-8 text-center text-gray-500">
          <p>No items found matching your search.</p>
        </td>
      `;
      document.getElementById('items-table-body').appendChild(noResultsRow);
    }
    noResultsRow.style.display = '';
  } else if (noResultsRow) {
    noResultsRow.style.display = 'none';
  }
}

// Add debounce function to improve performance
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Use debounced version of filterItems for the search input
document.getElementById('item-search').addEventListener('input', 
  debounce(e => filterItems(e.target.value), 300)
);

// Add event listeners for checkboxes
document.querySelectorAll('input[name="item_ids[]"]').forEach(checkbox => {
  checkbox.addEventListener('change', function() {
    updatePreview(this);
  });
});
</script> 