<div class="min-h-screen bg-gray-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex justify-between items-center mb-6">
      <div>
        <h1 class="text-2xl font-bold text-yellow-600"><%= t('stock_transactions.adjust.title') %></h1>
        <p class="mt-1 text-sm text-gray-500"><%= t('stock_transactions.adjust.subtitle') %></p>
      </div>
    </div>

    <div class="bg-white shadow rounded-lg" 
         data-controller="stock-transaction"
         data-stock-transaction-team-id-value="<%= @team.id %>"
         data-stock-transaction-type-value="adjust">
      <div class="p-6 border-b border-gray-200">
        <div class="grid grid-cols-1 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"><%= t('stock_transactions.adjust.location') %><span class="text-red-500">*</span></label>
            <% if @team.locations.any? %>
              <select name="location" class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500">
                <% @team.locations.ordered.each_with_index do |location, index| %>
                  <option value="<%= location.id %>" <%= 'selected' if index == 0 %>>
                    <%= location.name %>
                  </option>
                <% end %>
              </select>
            <% else %>
              <div class="rounded-md bg-yellow-50 p-4">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-sm font-medium text-yellow-800">
                      No locations found
                    </h3>
                    <div class="mt-2 text-sm text-yellow-700">
                      <p>
                        You need to create at least one location before performing stock transactions.
                        <%= link_to "Create a location", new_team_location_path(@team), class: "font-medium underline text-yellow-700 hover:text-yellow-600" %>
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            <% end %>
          </div>
        </div>
      </div>

      <div class="p-6">
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2"><%= t('stock_transactions.adjust.items') %></label>
          <div class="relative" data-controller="search" data-team-id="<%= @team.id %>">
            <input type="text" 
                   placeholder="<%= t('stock_transactions.adjust.search_placeholder') %>" 
                   class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500"
                   data-search-target="input"
                   data-action="input->search#search">
            
            <div class="absolute z-10 w-full mt-1 bg-white shadow-lg rounded-lg hidden"
                 data-search-target="results">
            </div>
          </div>
          
          <!-- Add Barcode Scanner Button -->
          <div class="flex justify-end space-x-4 mt-4">
            <button class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                   onclick="openAdjustBarcodeModal()">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"/>
              </svg>
              Scan Barcode
            </button>
          </div>
        </div>

        <div class="border rounded-lg overflow-hidden">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"><%= t('stock_transactions.adjust.table.item') %></th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"><%= t('stock_transactions.adjust.table.current_stock') %></th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"><%= t('stock_transactions.adjust.table.quantity') %><span class="text-red-500">*</span></th>
                <th scope="col" class="relative px-6 py-3">
                  <span class="sr-only"><%= t('stock_transactions.adjust.table.actions') %></span>
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" data-stock-transaction-target="itemsList">
              <!-- Items will be added here dynamically -->
            </tbody>
          </table>
        </div>

        <div class="mt-6">
          <label class="block text-sm font-medium text-gray-700 mb-2"><%= t('stock_transactions.adjust.notes') %></label>
          <textarea name="notes" rows="3" 
                    placeholder="<%= t('stock_transactions.adjust.notes_placeholder') %>"
                    class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500"></textarea>
        </div>

        <div class="mt-6 flex justify-between items-center">
          <div class="text-sm text-gray-500">
            <%= t('stock_transactions.adjust.total_items') %>: <span class="font-medium" data-stock-transaction-target="totalQuantity">0</span>
          </div>

          <div class="space-x-4">
            <button class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-purple-600 hover:bg-purple-700"
                    data-action="stock-transaction#save">
              <%= t('stock_transactions.adjust.save_button') %>
            </button>
          </div>
        </div>
      </div>

      <template data-stock-transaction-target="itemTemplate">
        <tr>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div class="h-10 w-10 flex-shrink-0 bg-gray-100 rounded-lg"></div>
              <div class="ml-4">
                <div class="text-sm font-medium text-gray-900" data-item-name></div>
                <div class="text-sm text-gray-500" data-item-sku></div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500" data-current-stock></td>
          <td class="px-6 py-4 whitespace-nowrap">
            <input type="number" 
                   name="items[][quantity]"
                   min="1"
                   class="w-24 border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
                   data-quantity
                   data-action="input->stock-transaction#updateTotal">
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <button type="button" 
                    class="text-red-600 hover:text-red-900"
                    data-action="stock-transaction#removeItem">
              <%= t('stock_transactions.adjust.table.actions') %>
            </button>
          </td>
        </tr>
      </template>
    </div>
  </div>
</div>

<!-- Update the Modal ID -->
  <div id="adjustBarcodeModal" class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 w-96 max-w-sm hidden">
    <div class="bg-white rounded-lg shadow-xl border border-gray-200">
      <!-- Modal header with close button - draggable -->
      <div id="adjustModalHeader" class="bg-purple-600 px-4 py-3 sm:px-6 flex justify-between items-center relative z-50 cursor-move select-none">
        <h3 class="text-lg leading-6 font-medium text-white pointer-events-none">
          Barcode Scanner
        </h3>
        <button type="button" 
                onclick="closeAdjustBarcodeModal()" 
                class="text-white hover:text-gray-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50 rounded-md p-1 transition-all duration-200 pointer-events-auto">
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <!-- Modal body content -->
      <div class="bg-white px-6 py-6">
        <div class="text-center mb-6">
          <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-purple-100 mb-4">
            <svg class="h-6 w-6 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z" />
            </svg>
          </div>
          <p class="text-sm text-gray-500">
            Scan or enter a barcode/QR code to search for an item
          </p>
        </div>
        
        <!-- Camera preview for scanning -->
        <div class="mb-6">
          <div id="adjust-scanner-container" class="relative w-full bg-gray-50 rounded-lg border-2 border-dashed border-gray-300 overflow-hidden">
            <!-- Close camera button - positioned outside the qr-reader div -->
            <button id="adjust-close-camera-btn" 
                    onclick="stopAdjustScanner()" 
                    class="absolute top-4 right-4 z-50 bg-black bg-opacity-50 text-white rounded-full p-2 hover:bg-opacity-70 transition-all duration-200 hidden"
                    title="Close Camera">
              <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            <div id="adjust-qr-reader" style="width: 100%; min-height: 250px;" class="flex items-center justify-center"></div>
            <div class="p-4 bg-white border-t border-gray-200">
              <div class="flex flex-col sm:flex-row gap-3">
                <button id="adjust-start-scanner" 
                        class="flex-1 bg-purple-600 text-white px-4 py-2 rounded-md shadow-sm hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors">
                  Start Camera
                </button>
                
                <div class="relative flex-1">
                  <input type="file" 
                         id="adjust-qr-input-file" 
                         accept="image/*" 
                         class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                         onchange="handleAdjustFileSelect(this)">
                  <button class="w-full bg-gray-600 text-white px-4 py-2 rounded-md shadow-sm hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors">
                    Upload QR Image
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Barcode/QR Code</label>
            <div class="relative rounded-md shadow-sm">
              <input type="text" 
                     id="adjustBarcodeInput"
                     class="block w-full pr-10 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm border-gray-300 rounded-md"
                     placeholder="Enter barcode or scan">
              <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4" />
                </svg>
              </div>
            </div>
          </div>
          
          <p class="text-xs text-gray-500 text-center">
            You can enter a code manually or use the camera to scan
          </p>
        </div>
          </div>
        </div>
      </div>
      
      <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
        <button type="button" 
                onclick="addAdjustScannedItem()"
                class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-purple-600 text-base font-medium text-white hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:ml-3 sm:w-auto sm:text-sm">
          Search
        </button>
        <button type="button" 
                onclick="closeAdjustBarcodeModal()"
                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
          Cancel
        </button>
      </div>
    </div>
</div>

<!-- Add the JavaScript for barcode scanning -->
<script>
  let adjustQrCodeScanner = null;

  function openAdjustBarcodeModal() {
    console.log('Opening adjust barcode modal');
    document.getElementById('adjustBarcodeModal').classList.remove('hidden');
    
    // Ensure camera is not running when modal opens
    if (adjustQrCodeScanner) {
      stopAdjustScanner();
    }
    
    setTimeout(() => {
      const input = document.getElementById('adjustBarcodeInput');
      if (input) {
        input.focus();
      }
    }, 100);

    // Add keyboard event listener for ESC key
    document.addEventListener('keydown', handleAdjustModalKeydown);

    // Initialize the scanner area if not already done (but don't start camera)
    initAdjustScanner();

    // Initialize drag functionality
    initAdjustModalDrag();
  }

  function handleAdjustModalKeydown(event) {
    if (event.key === 'Escape' && !document.getElementById('adjustBarcodeModal').classList.contains('hidden')) {
      closeAdjustBarcodeModal();
    }
  }

  function initAdjustScanner() {
    // Only initialize once
    if (window.adjustScannerInitialized) return;
    
    const scannerContainer = document.getElementById('adjust-scanner-container');
    const closeCameraBtn = document.getElementById('adjust-close-camera-btn');
    
    // Ensure close button is hidden initially (camera not running)
    if (closeCameraBtn) {
      closeCameraBtn.classList.add('hidden');
    }
    
    // Keep the close button outside the qr-reader area and only recreate the qr-reader part
    const qrReaderDiv = scannerContainer.querySelector('#adjust-qr-reader');
    if (qrReaderDiv) {
      // The qr-reader content will be replaced by the scanner library
      // The close button is positioned outside this div so it won't be affected
    }
    
    // Re-attach the event listener to the new button
    const startScannerButton = document.getElementById('adjust-start-scanner');
    if (startScannerButton) {
      startScannerButton.addEventListener('click', toggleAdjustScanner);
    }
    
    window.adjustScannerInitialized = true;
  }

  function toggleAdjustScanner() {
    if (adjustQrCodeScanner) {
      stopAdjustScanner();
      return;
    }

    startAdjustScanner();
  }

  function startAdjustScanner() {
    const startButton = document.getElementById('adjust-start-scanner');
    if (!startButton) {
      console.error('Start scanner button not found');
      return;
    }
    
    startButton.textContent = 'Starting...';
    startButton.disabled = true;

    // Load the html5-qrcode script directly from CDN
    if (!window.Html5Qrcode) {
      const script = document.createElement('script');
      script.src = 'https://unpkg.com/html5-qrcode@2.3.8/html5-qrcode.min.js';
      script.onload = function() {
        initializeAdjustScanner(startButton);
      };
      script.onerror = function() {
        console.error('Failed to load HTML5-QRCode library');
        startButton.textContent = 'Camera Not Available';
        startButton.disabled = true;
      };
      document.head.appendChild(script);
    } else {
      initializeAdjustScanner(startButton);
    }
  }
  
  function initializeAdjustScanner(startButton) {
    try {
      const html5QrCode = new Html5Qrcode("adjust-qr-reader");
      const config = {
        fps: 10,
        qrbox: { width: 240, height: 240 },
        aspectRatio: 4/3
      };
      
      html5QrCode.start(
        { facingMode: "environment" }, 
        config,
        onAdjustScanSuccess,
        onAdjustScanFailure
      ).then(() => {
        adjustQrCodeScanner = html5QrCode;
        updateAdjustScannerButtonState(true);
      }).catch((err) => {
        console.error(`Unable to start scanning: ${err}`);
        startButton.textContent = 'Start Camera';
        startButton.disabled = false;
        alert('Could not access camera. Please ensure you\'ve granted camera permissions or try entering the barcode manually.');
      });
    } catch (err) {
      console.error(err);
      startButton.textContent = 'Start Camera';
      startButton.disabled = false;
    }
  }

  function stopAdjustScanner() {
    if (adjustQrCodeScanner) {
      // Check if the scanner is actually running before trying to stop it
      if (adjustQrCodeScanner._isScanning) {
        adjustQrCodeScanner.stop().then(() => {
          adjustQrCodeScanner = null;
          updateAdjustScannerButtonState(false);
        }).catch((err) => {
          console.error("Error stopping scanner:", err);
          adjustQrCodeScanner = null;
          updateAdjustScannerButtonState(false);
        });
      } else {
        // Scanner was initialized but not running
        adjustQrCodeScanner = null;
        updateAdjustScannerButtonState(false);
      }
    }
  }

  // Helper function to update button state
  function updateAdjustScannerButtonState(isScanning) {
    const startButton = document.getElementById('adjust-start-scanner');
    const closeCameraBtn = document.getElementById('adjust-close-camera-btn');
    
    if (startButton) {
      startButton.textContent = isScanning ? 'Stop Camera' : 'Start Camera';
      startButton.disabled = false;
      
      // Remove all possible color classes first
      startButton.classList.remove('bg-purple-600', 'hover:bg-purple-700', 'bg-gray-600', 'hover:bg-gray-700', 'bg-red-600', 'hover:bg-red-700');
      
      if (isScanning) {
        // When camera is running, make button gray for "Stop Camera"
        startButton.classList.add('bg-gray-600', 'hover:bg-gray-700', 'text-white');
      } else {
        // When camera is not running, make button purple for "Start Camera"
        startButton.classList.add('bg-purple-600', 'hover:bg-purple-700', 'text-white');
      }
    }
    
    // Show/hide the close camera button
    if (closeCameraBtn) {
      if (isScanning) {
        closeCameraBtn.classList.remove('hidden');
      } else {
        closeCameraBtn.classList.add('hidden');
      }
    }
  }

  function onAdjustScanSuccess(decodedText, decodedResult) {
    // Handle the scanned code
    console.log(`Code scanned: ${decodedText}`, decodedResult);
    
    // Set the input value
    document.getElementById('adjustBarcodeInput').value = decodedText;
    
    // Stop the scanner
    stopAdjustScanner();
    
    // Process the scanned item
    addAdjustScannedItem();
  }

  function onAdjustScanFailure(error) {
    // Handle scan failure, ignore frequent failures as they're normal during scanning
    // console.debug(`Scan error: ${error}`);
  }

  function closeAdjustBarcodeModal() {
    console.log('Closing adjust barcode modal');
    
    try {
      // Try to stop the scanner if it's running
      if (adjustQrCodeScanner) {
        stopAdjustScanner();
      }
    } catch (e) {
      console.error("Error while stopping scanner:", e);
      // Reset scanner variable even if stopping fails
      adjustQrCodeScanner = null;
    }
    
    // Remove keyboard event listener
    document.removeEventListener('keydown', handleAdjustModalKeydown);
    
    document.getElementById('adjustBarcodeModal').classList.add('hidden');
    document.getElementById('adjustBarcodeInput').value = '';
  }

  function addAdjustScannedItem() {
    const barcodeInput = document.getElementById('adjustBarcodeInput');
    const barcode = barcodeInput.value.trim();
    
    if (!barcode) {
      barcodeInput.classList.add('border-red-500');
      setTimeout(() => {
        barcodeInput.classList.remove('border-red-500');
      }, 2000);
      return;
    }
    
    const teamId = document.querySelector('[data-stock-transaction-team-id-value]')
      .getAttribute('data-stock-transaction-team-id-value');
    
    fetch(`/teams/${teamId}/items/find_by_barcode?barcode=${encodeURIComponent(barcode)}`)
      .then(response => response.json())
      .then(data => {
        if (data.success && data.item) {
          const item = data.item;
          
          // Check if item is already in the list
          const existingRow = document.querySelector(`tr[data-item-id="${item.id}"]`);
          if (existingRow) {
            showToast(`${item.name} is already in the list`, "blue");
            closeAdjustBarcodeModal();
            return;
          }
          
          // Add new item to the list
          const template = document.querySelector('[data-stock-transaction-target="itemTemplate"]');
          const itemsList = document.querySelector('[data-stock-transaction-target="itemsList"]');
          
          if (template && itemsList) {
            const clone = template.content.cloneNode(true);
            const row = clone.querySelector('tr');
            
            row.dataset.itemId = item.id;
            row.querySelector('[data-item-name]').textContent = item.name;
            row.querySelector('[data-item-sku]').textContent = item.sku;
            row.querySelector('[data-current-stock]').textContent = item.current_stock;
            
            // Set default quantity to 1 instead of current stock
            const quantityInput = row.querySelector('[data-quantity]');
            quantityInput.value = 1;
            
            itemsList.appendChild(row);
            
            // Update total if needed
            const stockTransactionController = document.querySelector('[data-controller="stock-transaction"]').__stimulusController;
            if (stockTransactionController) {
              stockTransactionController.updateTotal();
            }
            
            showToast(`Added ${item.name} to list`, "green");
          }
          
          closeAdjustBarcodeModal();
        } else {
          showToast("Item not found", "red");
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast("Error searching for item", "red");
      });
  }
  
  // File handling functions
  function handleAdjustFileSelect(fileInput) {
    const files = fileInput.files;
    if (files.length === 0) {
      return;
    }
    
    const file = files[0];
    
    // Show loading state
    showToast("Processing image...", "blue");
    
    // Create a new Html5Qrcode instance if needed
    if (!adjustQrCodeScanner) {
      initAdjustScanner();
      
      // Need to wait for the scanner initialization
      setTimeout(() => {
        processAdjustFile(file);
      }, 500);
    } else {
      processAdjustFile(file);
    }
    
    // Reset the file input so the same file can be selected again
    fileInput.value = '';
  }
  
  function processAdjustFile(file) {
    // Make sure Html5Qrcode is available
    if (!window.Html5Qrcode) {
      loadHtml5QrcodeScript(() => processAdjustFile(file));
      return;
    }
    
    try {
      // Create a new Html5Qrcode instance just for file scanning
      // This avoids conflicts with the camera scanner
      const fileScanner = new Html5Qrcode("adjust-qr-reader");
      
      fileScanner.scanFile(file, true)
        .then(decodedText => {
          console.log(`Code scanned from file: ${decodedText}`);
          
          // Set the input value
          document.getElementById('adjustBarcodeInput').value = decodedText;
          
          // Clean up the file scanner before processing the item
          fileScanner.clear();
          
          // Process the scanned item
          addAdjustScannedItem();
        })
        .catch(error => {
          console.error("Error scanning file:", error);
          showToast("Could not detect any QR code in this image", "red");
          
          // Make sure to clean up even on error
          try {
            fileScanner.clear();
          } catch (e) {
            console.error("Error clearing file scanner:", e);
          }
        });
    } catch (error) {
      console.error("Error processing file:", error);
      showToast("Failed to process the image", "red");
    }
  }
  
  // Toast notification function (can be shared)
  function showToast(message, color = "green") {
    // Create toast element if it doesn't exist
    let toast = document.getElementById('toast-notification');
    if (!toast) {
      toast = document.createElement('div');
      toast.id = 'toast-notification';
      toast.className = 'fixed bottom-4 right-4 text-white px-4 py-2 rounded-lg shadow-lg transform transition-all duration-300 translate-y-20 opacity-0 z-50';
      document.body.appendChild(toast);
    }
    
    // Set background color based on the type
    toast.className = toast.className.replace(/bg-\w+-500/g, '');
    toast.classList.add(`bg-${color}-500`);
    
    // Set message and show toast
    toast.textContent = message;
    toast.classList.remove('translate-y-20', 'opacity-0');
    
    // Hide after 3 seconds
    setTimeout(() => {
      toast.classList.add('translate-y-20', 'opacity-0');
    }, 3000);
  }
  
  // Helper function to load the HTML5-QRCode script (can be shared)
  function loadHtml5QrcodeScript(callback) {
    if (window.Html5Qrcode) {
      if (callback) callback();
      return;
    }
    
    const script = document.createElement('script');
    script.src = 'https://unpkg.com/html5-qrcode@2.3.8/html5-qrcode.min.js';
    script.onload = callback;
    script.onerror = function() {
      console.error('Failed to load HTML5-QRCode library');
      showToast("Failed to load barcode scanner library", "red");
    };
    document.head.appendChild(script);
  }

  // Modal drag functionality for adjust
  function initAdjustModalDrag() {
    const modal = document.getElementById('adjustBarcodeModal');
    const header = document.getElementById('adjustModalHeader');
    
    if (!modal || !header) return;
    
    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;
    let xOffset = 0;
    let yOffset = 0;
    
    // Reset any previous transform when modal opens
    modal.style.transform = '';

    header.addEventListener('mousedown', dragStart);
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', dragEnd);

    // Touch events for mobile
    header.addEventListener('touchstart', dragStart);
    document.addEventListener('touchmove', drag);
    document.addEventListener('touchend', dragEnd);

    function dragStart(e) {
      if (e.target.closest('button')) return; // Don't drag when clicking close button
      
      if (e.type === "touchstart") {
        initialX = e.touches[0].clientX - xOffset;
        initialY = e.touches[0].clientY - yOffset;
      } else {
        initialX = e.clientX - xOffset;
        initialY = e.clientY - yOffset;
      }

      if (e.target === header || header.contains(e.target)) {
        isDragging = true;
        header.style.cursor = 'grabbing';
      }
    }

    function drag(e) {
      if (isDragging) {
        e.preventDefault();
        
        if (e.type === "touchmove") {
          currentX = e.touches[0].clientX - initialX;
          currentY = e.touches[0].clientY - initialY;
        } else {
          currentX = e.clientX - initialX;
          currentY = e.clientY - initialY;
        }

        xOffset = currentX;
        yOffset = currentY;

        // Constrain to viewport
        const rect = modal.getBoundingClientRect();
        const maxX = window.innerWidth - rect.width;
        const maxY = window.innerHeight - rect.height;
        
        xOffset = Math.min(Math.max(0, xOffset), maxX);
        yOffset = Math.min(Math.max(0, yOffset), maxY);

        // Position absolutely from top-left
        modal.style.position = 'fixed';
        modal.style.top = `${yOffset}px`;
        modal.style.left = `${xOffset}px`;
        modal.style.transform = 'none';
      }
    }

    function dragEnd() {
      if (isDragging) {
        isDragging = false;
        header.style.cursor = 'move';
      }
    }
  }
</script>

<style>
  /* Styles for the HTML5 QR scanner */
  #qr-reader {
    width: 100%;
    min-height: 300px;
  }
  
  #qr-reader img {
    display: none; /* Hide the library's default logo */
  }
  
  #qr-reader__scan_region {
    position: relative;
  }
  
  #qr-reader__scan_region::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 240px;
    height: 240px;
    border: 2px solid #8b5cf6;
    border-radius: 8px;
    z-index: 10;
  }
  
  #qr-reader__status_span {
    background-color: #8b5cf6 !important;
    color: white !important;
  }
  
  #toast-notification {
    z-index: 9999;
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
  }
</style> 