<%# Example of how to use the new configuration-driven transaction form %>
<%# This demonstrates how to pass JavaScript configuration from Rails views to Stimulus controllers %>

<div class="bg-white shadow rounded-lg" 
     data-controller="stock-transaction"
     <%= raw transaction_stimulus_data(@transaction_type, @team.id).map { |k, v| "#{k}=\"#{h(v)}\"" }.join(' ') %>>
  
  <div class="p-6 border-b border-gray-200">
    <h2 class="text-lg font-medium text-<%= transaction_js_config(@transaction_type, @team.id)[:color] %>-600">
      <%= transaction_js_config(@transaction_type, @team.id)[:title] %>
    </h2>
    <p class="mt-1 text-sm text-gray-500">
      <%= transaction_js_config(@transaction_type, @team.id)[:description] %>
    </p>
  </div>

  <div class="p-6">
    <%# Location selection based on configuration %>
    <% config = transaction_js_config(@transaction_type, @team.id) %>
    <% if config[:locations].include?('source') %>
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">
          Source Location <span class="text-red-500">*</span>
        </label>
        <select name="source_location_id" class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-<%= config[:color] %>-500 focus:border-<%= config[:color] %>-500">
          <option value="">Select source location...</option>
          <% @team.locations.ordered.each do |location| %>
            <option value="<%= location.id %>"><%= location.name %></option>
          <% end %>
        </select>
      </div>
    <% end %>

    <% if config[:locations].include?('destination') %>
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">
          <%= config[:locations].include?('source') ? 'Destination Location' : 'Location' %> <span class="text-red-500">*</span>
        </label>
        <select name="<%= config[:locations].include?('source') ? 'destination_location_id' : 'location' %>" 
                class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-<%= config[:color] %>-500 focus:border-<%= config[:color] %>-500">
          <option value="">Select location...</option>
          <% @team.locations.ordered.each do |location| %>
            <option value="<%= location.id %>"><%= location.name %></option>
          <% end %>
        </select>
      </div>
    <% end %>

    <%# Item search and barcode scanner %>
    <div class="mb-6">
      <label class="block text-sm font-medium text-gray-700 mb-2">Items</label>
      <div class="relative">
        <input type="text" 
               placeholder="Search for items..." 
               class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-<%= config[:color] %>-500 focus:border-<%= config[:color] %>-500"
               id="searchInput">
        
        <div class="absolute z-10 w-full mt-1 bg-white shadow-lg rounded-lg hidden" id="searchResults">
        </div>
      </div>

      <div class="flex justify-end mt-4">
        <button type="button"
                class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                data-action="stock-transaction#openBarcodeModal">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"/>
          </svg>
          Scan Barcode
        </button>
      </div>
    </div>

    <%# Items table %>
    <div class="border rounded-lg overflow-hidden">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
            <% if config[:ui_behavior][:show_current_stock] %>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Current Stock</th>
            <% end %>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              <%= config[:quantity_behavior] == 'adjustment' ? 'New Quantity' : 'Quantity' %>
              <span class="text-red-500">*</span>
            </th>
            <th scope="col" class="relative px-6 py-3">
              <span class="sr-only">Actions</span>
            </th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200" data-stock-transaction-target="itemsList">
          <!-- Items will be added here dynamically -->
        </tbody>
      </table>
    </div>

    <%# Notes section %>
    <div class="mt-6">
      <label class="block text-sm font-medium text-gray-700 mb-2">Notes</label>
      <textarea name="notes" rows="3" 
                placeholder="Optional notes about this transaction..."
                class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-<%= config[:color] %>-500 focus:border-<%= config[:color] %>-500"></textarea>
    </div>

    <%# Footer with total and save button %>
    <div class="mt-6 flex justify-between items-center">
      <div class="text-sm text-gray-500">
        Total Items: <span class="font-medium" data-stock-transaction-target="totalQuantity">0</span>
      </div>

      <div class="space-x-4">
        <button type="button"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-<%= config[:color] %>-600 hover:bg-<%= config[:color] %>-700"
                data-action="stock-transaction#save">
          Save <%= config[:title] %>
        </button>
      </div>
    </div>
  </div>

  <%# Barcode Scanner Modal - uses configuration for styling %>
  <%= render 'stock_transactions/barcode_modal', config: config %>

  <%# Item Template - configured based on transaction type %>
  <template data-stock-transaction-target="itemTemplate">
    <tr>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center">
          <div class="h-10 w-10 flex-shrink-0 bg-gray-100 rounded-lg"></div>
          <div class="ml-4">
            <div class="text-sm font-medium text-gray-900" data-item-name></div>
            <div class="text-sm text-gray-500" data-item-sku></div>
          </div>
        </div>
      </td>
      <% if config[:ui_behavior][:show_current_stock] %>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500" data-current-stock></td>
      <% end %>
      <td class="px-6 py-4 whitespace-nowrap">
        <input type="number" 
               name="items[][quantity]"
               <% if config[:ui_behavior][:quantity_min] %>min="<%= config[:ui_behavior][:quantity_min] %>"<% end %>
               <% if config[:ui_behavior][:quantity_step] %>step="<%= config[:ui_behavior][:quantity_step] %>"<% end %>
               class="w-24 border-gray-300 rounded-md shadow-sm focus:ring-<%= config[:color] %>-500 focus:border-<%= config[:color] %>-500"
               data-quantity
               data-action="input->stock-transaction#updateTotal">
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        <button type="button" 
                class="text-red-600 hover:text-red-900"
                data-action="stock-transaction#removeItem">
          Remove
        </button>
      </td>
    </tr>
  </template>
</div>

<%# Example of how to pass additional configuration overrides %>
<script>
  // You can also override configuration in JavaScript if needed
  document.addEventListener('DOMContentLoaded', function() {
    const controller = document.querySelector('[data-controller="stock-transaction"]');
    if (controller && controller.__stimulusController) {
      // Example of runtime configuration override
      const customConfig = {
        ui_behavior: {
          ...controller.__stimulusController.transactionConfig.ui_behavior,
          custom_validation: true
        }
      };
      
      // Merge custom configuration
      Object.assign(controller.__stimulusController.transactionConfig, customConfig);
    }
  });
</script>