<div class="min-h-screen bg-gray-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex justify-between items-center mb-6">
      <div>
        <h1 class="text-2xl font-bold text-gray-900"><%= t('stock_transactions.move.title') %></h1>
        <p class="mt-1 text-sm text-gray-500"><%= t('stock_transactions.move.subtitle') %></p>
      </div>
    </div>

    <div class="bg-white shadow rounded-lg" 
         data-controller="stock-transaction"
         data-stock-transaction-team-id-value="<%= @team.id %>"
         data-stock-transaction-type-value="move">
      <div class="p-6 border-b border-gray-200">
        <div class="grid grid-cols-2 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"><%= t('stock_transactions.move.from_location') %><span class="text-red-500">*</span></label>
            <% if @team.locations.count >= 2 %>
              <select name="source_location_id" class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500">
                <% @team.locations.ordered.each_with_index do |location, index| %>
                  <option value="<%= location.id %>" <%= 'selected' if index == 0 %>>
                    <%= location.name %>
                  </option>
                <% end %>
              </select>
            <% else %>
              <div class="rounded-md bg-yellow-50 p-4">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-sm font-medium text-yellow-800">
                      Not enough locations
                    </h3>
                    <div class="mt-2 text-sm text-yellow-700">
                      <p>
                        You need at least two locations to perform stock movements.
                        <%= link_to "Create a location", new_team_location_path(@team), class: "font-medium underline text-yellow-700 hover:text-yellow-600" %>
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            <% end %>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"><%= t('stock_transactions.move.to_location') %><span class="text-red-500">*</span></label>
            <% if @team.locations.count >= 2 %>
              <select name="destination_location_id" class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500">
                <% @team.locations.ordered.each_with_index do |location, index| %>
                  <option value="<%= location.id %>" <%= 'selected' if index == 1 %>>
                    <%= location.name %>
                  </option>
                <% end %>
              </select>
            <% else %>
              <div class="rounded-md bg-yellow-50 p-4">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-sm font-medium text-yellow-800">
                      Not enough locations
                    </h3>
                    <div class="mt-2 text-sm text-yellow-700">
                      <p>
                        You need at least two locations to perform stock movements.
                        <%= link_to "Create a location", new_team_location_path(@team), class: "font-medium underline text-yellow-700 hover:text-yellow-600" %>
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            <% end %>
          </div>
        </div>
      </div>

      <div class="p-6">
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2"><%= t('stock_transactions.move.items') %></label>
          <div class="relative" data-team-id="<%= @team.id %>">
            <input type="text" 
                   placeholder="<%= t('stock_transactions.move.search_placeholder') %>" 
                   class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500"
                   id="searchInput">
            
            <div class="absolute z-10 w-full mt-1 bg-white shadow-lg rounded-lg hidden"
                 id="searchResults">
            </div>
          </div>
        </div>

        <div class="border rounded-lg overflow-hidden">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"><%= t('stock_transactions.move.table.item') %></th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"><%= t('stock_transactions.move.table.current_stock') %></th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"><%= t('stock_transactions.move.table.quantity') %><span class="text-red-500">*</span></th>
                <th scope="col" class="relative px-6 py-3">
                  <span class="sr-only"><%= t('stock_transactions.move.table.actions') %></span>
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" data-stock-transaction-target="itemsList">
              <!-- Items will be added here dynamically -->
            </tbody>
          </table>
        </div>

        <div class="mt-6">
          <label class="block text-sm font-medium text-gray-700 mb-2"><%= t('stock_transactions.move.notes') %></label>
          <textarea name="notes" rows="3" 
                    placeholder="<%= t('stock_transactions.move.notes_placeholder') %>"
                    class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500"></textarea>
        </div>

        <div class="mt-6 flex justify-between items-center">
          <div class="text-sm text-gray-500">
            <%= t('stock_transactions.move.total_items') %>: <span class="font-medium" data-stock-transaction-target="totalQuantity">0</span>
          </div>

          <div class="space-x-4">
            <button class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-purple-600 hover:bg-purple-700"
                    data-action="stock-transaction#save">
              <%= t('stock_transactions.move.save_button') %>
            </button>
          </div>
        </div>
      </div>

      <template data-stock-transaction-target="itemTemplate">
        <tr>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div class="ml-4">
                <div class="text-sm font-medium text-gray-900" data-item-name></div>
                <div class="text-sm text-gray-500" data-item-sku></div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500" data-current-stock></td>
          <td class="px-6 py-4 whitespace-nowrap">
            <input type="number" 
                   name="items[][quantity]"
                   min="1"
                   class="w-24 border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
                   data-quantity
                   data-action="input->stock-transaction#updateTotal">
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <button type="button" 
                    class="text-red-600 hover:text-red-900"
                    data-action="stock-transaction#removeItem">
              <%= t('stock_transactions.move.table.actions') %>
            </button>
          </td>
        </tr>
      </template>
    </div>
  </div>
</div>

<script>
  // Wait for the document to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');
    const teamId = document.querySelector('[data-team-id]').dataset.teamId;
    const sourceLocationSelect = document.querySelector('select[name="source_location_id"]');

    // Hide results when clicking outside
    document.addEventListener('click', function(event) {
      if (!searchInput.contains(event.target) && !searchResults.contains(event.target)) {
        searchResults.classList.add('hidden');
      }
    });

    // Function to load items
    function loadItems(query = '') {
      searchResults.classList.remove('hidden');

      // Get the source location ID
      const sourceLocationId = sourceLocationSelect.value;

      fetch(`/teams/${teamId}/items/search?q=${encodeURIComponent(query)}&location_id=${sourceLocationId}`, {
        headers: {
          "Accept": "text/html",
          "X-Requested-With": "XMLHttpRequest"
        }
      })
      .then(response => {
        if (!response.ok) throw new Error('Search failed');
        return response.text();
      })
      .then(html => {
        searchResults.innerHTML = html;
        
        // Add click handlers to the search results
        searchResults.querySelectorAll('button[data-item-id]').forEach(button => {
          button.addEventListener('click', function() {
            const item = {
              id: this.dataset.itemId,
              name: this.dataset.itemName,
              sku: this.dataset.itemSku,
              currentStock: this.dataset.itemCurrentStock
            };

            // Get the items list and template
            const itemsList = document.querySelector('[data-stock-transaction-target="itemsList"]');
            const template = document.querySelector('[data-stock-transaction-target="itemTemplate"]');
            
            if (template && itemsList) {
              // Check if item is already in the list
              const existingRow = itemsList.querySelector(`tr[data-item-id="${item.id}"]`);
              if (existingRow) {
                // If item already exists, increment quantity by 1 (checking stock limits)
                const quantityInput = existingRow.querySelector('[data-quantity]');
                const currentQuantity = parseInt(quantityInput.value) || 0;
                const currentStock = parseInt(existingRow.querySelector('[data-current-stock]').textContent);
                
                if (currentQuantity + 1 > currentStock) {
                  showToast(`Cannot move more than ${currentStock} of this item!`, "red");
                  return;
                }
                
                quantityInput.value = currentQuantity + 1;
                
                // Manually trigger the update total calculation
                const stockTransactionController = document.querySelector('[data-controller="stock-transaction"]').__stimulusController;
                if (stockTransactionController) {
                  stockTransactionController.updateTotal();
                }
                
                // Show success notification
                showToast(`Added 1 more ${item.name} to move`);
              } else {
                // Add new item to the list
                const clone = template.content.cloneNode(true);
                const row = clone.querySelector('tr');
                
                row.dataset.itemId = item.id;
                row.querySelector('[data-item-name]').textContent = item.name;
                row.querySelector('[data-item-sku]').textContent = item.sku;
                row.querySelector('[data-current-stock]').textContent = item.currentStock;
                
                // Set default quantity to 1 and max to current stock
                const quantityInput = row.querySelector('[data-quantity]');
                quantityInput.value = 1;
                quantityInput.max = item.currentStock;
                
                itemsList.appendChild(row);
                
                // Manually trigger the update total calculation
                const stockTransactionController = document.querySelector('[data-controller="stock-transaction"]').__stimulusController;
                if (stockTransactionController) {
                  stockTransactionController.updateTotal();
                }
                
                // Show success notification
                showToast(`Added ${item.name} to move list`);
              }
            }

            // Clear the search input and hide results
            searchInput.value = "";
            searchResults.classList.add('hidden');
          });
        });
      })
      .catch(error => {
        console.error('Search error:', error);
        searchResults.innerHTML = `
          <div class="py-14">
            <div class="text-center">
              <svg class="mx-auto h-6 w-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <p class="mt-2 text-sm text-gray-500">Error searching items. Please try again.</p>
            </div>
          </div>
        `;
      });
    }

    // Show all items when input is focused
    searchInput.addEventListener('focus', function() {
      loadItems();
    });

    // Handle search input
    let searchTimeout;
    searchInput.addEventListener('input', function() {
      clearTimeout(searchTimeout);
      const query = this.value.trim();
      
      searchTimeout = setTimeout(() => {
        loadItems(query);
      }, 300); // Debounce search for 300ms
    });

    // Reload items when source location changes
    sourceLocationSelect.addEventListener('change', function() {
      if (searchInput.value.trim()) {
        loadItems(searchInput.value.trim());
      }
    });
  });

  // Add toast notification function if not already present
  function showToast(message, color = "green") {
    // Create toast element if it doesn't exist
    let toast = document.getElementById('toast-notification');
    if (!toast) {
      toast = document.createElement('div');
      toast.id = 'toast-notification';
      toast.className = 'fixed bottom-4 right-4 text-white px-4 py-2 rounded-lg shadow-lg transform transition-all duration-300 translate-y-20 opacity-0 z-50';
      document.body.appendChild(toast);
    }
    
    // Set background color based on the type
    toast.className = toast.className.replace(/bg-\w+-500/g, '');
    toast.classList.add(`bg-${color}-500`);
    
    // Set message and show toast
    toast.textContent = message;
    toast.classList.remove('translate-y-20', 'opacity-0');
    
    // Hide after 3 seconds
    setTimeout(() => {
      toast.classList.add('translate-y-20', 'opacity-0');
    }, 3000);
  }
</script>

<style>
  #toast-notification {
    z-index: 9999;
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
  }
</style> 