<div class="min-h-screen bg-gray-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex justify-between items-center mb-6">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Adjust Stock</h1>
        <p class="mt-1 text-sm text-gray-500">Adjust inventory levels</p>
      </div>
      <button class="text-gray-400 hover:text-gray-500">
        <span class="sr-only">Reset</span>
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
        </svg>
      </button>
    </div>

    <div class="bg-white shadow rounded-lg" 
         data-controller="stock-transaction"
         data-stock-transaction-team-id-value="<%= @team.id %>"
         data-stock-transaction-type-value="adjust">
      <div class="p-6 border-b border-gray-200">
        <div class="grid grid-cols-3 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Location<span class="text-red-500">*</span></label>
            <select name="location" class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500">
              <option value="">Select a location</option>
              <% @team.locations.ordered.each do |location| %>
                <option value="<%= location.id %>">
                  <%= location.name %>
                </option>
              <% end %>
            </select>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Date</label>
            <input type="text" value="Now" class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500">
          </div>
        </div>
      </div>

      <div class="p-6">
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2">Items</label>
          <div class="relative" data-controller="search" data-team-id="<%= @team.id %>">
            <input type="text" 
                   placeholder="Search for an item" 
                   class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500"
                   data-search-target="input"
                   data-action="input->search#search">
            
            <div class="absolute z-10 w-full mt-1 bg-white shadow-lg rounded-lg hidden"
                 data-search-target="results">
            </div>
          </div>
          
          <!-- Add Barcode Scanner Button -->
          <div class="flex justify-end space-x-4 mt-4">
            <button class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                   onclick="openAdjustBarcodeModal()">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"/>
              </svg>
              Scan Barcode
            </button>
          </div>
        </div>

        <div class="border rounded-lg overflow-hidden">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Current Stock</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">New Stock<span class="text-red-500">*</span></th>
                <th scope="col" class="relative px-6 py-3">
                  <span class="sr-only">Actions</span>
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" data-stock-transaction-target="itemsList">
              <!-- Items will be added here dynamically -->
            </tbody>
          </table>
        </div>

        <div class="mt-6">
          <label class="block text-sm font-medium text-gray-700 mb-2">Notes</label>
          <textarea rows="3" 
                    placeholder="Enter a memo. Tip) Use '#' for easy search (e.g. #PurpleStock)."
                    class="w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500"></textarea>
        </div>

        <div class="mt-6 flex justify-between items-center">
          <div class="text-sm text-gray-500">
            <span class="font-medium">1</span> Item
          </div>

          <div class="space-x-4">
            <button class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
              Save Draft
            </button>
            <button class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-purple-600 hover:bg-purple-700"
                    data-action="stock-transaction#save">
              Adjust Stock
            </button>
          </div>
        </div>
      </div>

      <template data-stock-transaction-target="itemTemplate">
        <tr>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div class="h-10 w-10 flex-shrink-0 bg-gray-100 rounded-lg"></div>
              <div class="ml-4">
                <div class="text-sm font-medium text-gray-900" data-item-name></div>
                <div class="text-sm text-gray-500" data-item-sku></div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500" data-current-stock></td>
          <td class="px-6 py-4 whitespace-nowrap">
            <input type="number" 
                   min="0" 
                   class="w-24 border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
                   data-quantity>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <button type="button" 
                    class="text-red-600 hover:text-red-900"
                    data-action="stock-transaction#removeItem">
              Remove
            </button>
          </td>
        </tr>
      </template>
    </div>
  </div>
</div>

<!-- Update the Modal ID -->
<div id="adjustBarcodeModal" class="fixed inset-0 z-50 overflow-y-auto hidden">
  <div class="flex items-center justify-center min-h-screen p-4 text-center sm:p-0">
    <div class="fixed inset-0 transition-opacity" aria-hidden="true">
      <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
    </div>

    <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-md sm:w-full">
      <!-- Modal header with close button -->
      <div class="bg-purple-600 px-4 py-3 sm:px-6 flex justify-between items-center">
        <h3 class="text-lg leading-6 font-medium text-white">
          Barcode Scanner
        </h3>
        <button type="button" 
                onclick="closeAdjustBarcodeModal()" 
                class="text-white hover:text-gray-200 focus:outline-none">
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <!-- Modal body content -->
      <div class="bg-white px-4 pt-5 pb-4 sm:p-6">
        <div class="sm:flex sm:items-start">
          <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-purple-100 sm:mx-0 sm:h-10 sm:w-10">
            <svg class="h-6 w-6 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z" />
            </svg>
          </div>
          <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
            <p class="text-sm text-gray-500">
              Scan or enter a barcode/QR code to search for an item
            </p>
            
            <!-- Camera preview for scanning -->
            <div class="mt-4 mb-4">
              <div id="adjust-scanner-container" class="relative w-full bg-gray-100 rounded-md overflow-hidden flex flex-col items-center justify-center p-4">
                <div id="adjust-qr-reader" style="width: 100%; min-height: 300px;"></div>
                <div class="text-center mt-4 flex flex-col sm:flex-row gap-2 w-full">
                  <button id="adjust-start-scanner" 
                          class="w-full sm:w-auto bg-purple-600 text-white px-4 py-2 rounded-md shadow-sm hover:bg-purple-700 focus:outline-none">
                    Start Camera
                  </button>
                  
                  <div class="relative w-full sm:w-auto">
                    <input type="file" 
                           id="adjust-qr-input-file" 
                           accept="image/*" 
                           class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                           onchange="handleAdjustFileSelect(this)">
                    <button class="w-full bg-blue-600 text-white px-4 py-2 rounded-md shadow-sm hover:bg-blue-700 focus:outline-none">
                      Upload QR Image
                    </button>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="mt-4 flex flex-col md:flex-row gap-4">
              <div class="flex-1">
                <label class="block text-sm font-medium text-gray-700 mb-2">Barcode/QR Code</label>
                <div class="relative rounded-md shadow-sm">
                  <input type="text" 
                         id="adjustBarcodeInput"
                         class="block w-full pr-10 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm border-gray-300 rounded-md"
                         placeholder="Enter barcode or scan">
                  <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4" />
                    </svg>
                  </div>
                </div>
              </div>
            </div>
            
            <p class="mt-2 text-xs text-gray-500">
              You can enter a code manually or use the camera to scan
            </p>
          </div>
        </div>
      </div>
      
      <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
        <button type="button" 
                onclick="addAdjustScannedItem()"
                class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-purple-600 text-base font-medium text-white hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:ml-3 sm:w-auto sm:text-sm">
          Search
        </button>
        <button type="button" 
                onclick="closeAdjustBarcodeModal()"
                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Add the JavaScript for barcode scanning -->
<script>
  let adjustQrCodeScanner = null;

  function openAdjustBarcodeModal() {
    console.log('Opening adjust barcode modal');
    document.getElementById('adjustBarcodeModal').classList.remove('hidden');
    
    setTimeout(() => {
      const input = document.getElementById('adjustBarcodeInput');
      if (input) {
        input.focus();
      }
    }, 100);

    initAdjustScanner();
  }

  function initAdjustScanner() {
    // Only initialize once
    if (window.adjustScannerInitialized) return;
    
    const scannerContainer = document.getElementById('adjust-scanner-container');
    
    // Create a new structure that preserves the button
    scannerContainer.innerHTML = `
      <div id="adjust-qr-reader" style="width: 100%; min-height: 300px;"></div>
      <div class="text-center mt-4 flex flex-col sm:flex-row gap-2 w-full">
        <button id="adjust-start-scanner" 
                class="w-full sm:w-auto bg-purple-600 text-white px-4 py-2 rounded-md shadow-sm hover:bg-purple-700 focus:outline-none">
          Start Camera
        </button>
        
        <div class="relative w-full sm:w-auto">
          <input type="file" 
                 id="adjust-qr-input-file" 
                 accept="image/*" 
                 class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                 onchange="handleAdjustFileSelect(this)">
          <button class="w-full bg-blue-600 text-white px-4 py-2 rounded-md shadow-sm hover:bg-blue-700 focus:outline-none">
            Upload QR Image
          </button>
        </div>
      </div>
    `;
    
    // Re-attach the event listener to the new button
    const startScannerButton = document.getElementById('adjust-start-scanner');
    if (startScannerButton) {
      startScannerButton.addEventListener('click', toggleAdjustScanner);
    }
    
    window.adjustScannerInitialized = true;
  }

  function toggleAdjustScanner() {
    if (adjustQrCodeScanner) {
      stopAdjustScanner();
      return;
    }

    startAdjustScanner();
  }

  function startAdjustScanner() {
    const startButton = document.getElementById('adjust-start-scanner');
    if (!startButton) {
      console.error('Start scanner button not found');
      return;
    }
    
    startButton.textContent = 'Starting...';
    startButton.disabled = true;

    // Load the html5-qrcode script directly from CDN
    if (!window.Html5Qrcode) {
      const script = document.createElement('script');
      script.src = 'https://unpkg.com/html5-qrcode@2.3.8/html5-qrcode.min.js';
      script.onload = function() {
        initializeAdjustScanner(startButton);
      };
      script.onerror = function() {
        console.error('Failed to load HTML5-QRCode library');
        startButton.textContent = 'Camera Not Available';
        startButton.disabled = true;
      };
      document.head.appendChild(script);
    } else {
      initializeAdjustScanner(startButton);
    }
  }
  
  function initializeAdjustScanner(startButton) {
    try {
      const html5QrCode = new Html5Qrcode("adjust-qr-reader");
      const config = {
        fps: 10,
        qrbox: { width: 240, height: 240 },
        aspectRatio: 4/3
      };
      
      html5QrCode.start(
        { facingMode: "environment" }, 
        config,
        onAdjustScanSuccess,
        onAdjustScanFailure
      ).then(() => {
        adjustQrCodeScanner = html5QrCode;
        updateAdjustScannerButtonState(true);
      }).catch((err) => {
        console.error(`Unable to start scanning: ${err}`);
        startButton.textContent = 'Start Camera';
        startButton.disabled = false;
        alert('Could not access camera. Please ensure you\'ve granted camera permissions or try entering the barcode manually.');
      });
    } catch (err) {
      console.error(err);
      startButton.textContent = 'Start Camera';
      startButton.disabled = false;
    }
  }

  function stopAdjustScanner() {
    if (adjustQrCodeScanner) {
      // Check if the scanner is actually running before trying to stop it
      if (adjustQrCodeScanner._isScanning) {
        adjustQrCodeScanner.stop().then(() => {
          adjustQrCodeScanner = null;
          updateAdjustScannerButtonState(false);
        }).catch((err) => {
          console.error("Error stopping scanner:", err);
          adjustQrCodeScanner = null;
          updateAdjustScannerButtonState(false);
        });
      } else {
        // Scanner was initialized but not running
        adjustQrCodeScanner = null;
        updateAdjustScannerButtonState(false);
      }
    }
  }

  // Helper function to update button state
  function updateAdjustScannerButtonState(isScanning) {
    const startButton = document.getElementById('adjust-start-scanner');
    if (startButton) {
      startButton.textContent = isScanning ? 'Stop Camera' : 'Start Camera';
      startButton.disabled = false;
      if (isScanning) {
        startButton.classList.remove('bg-purple-600', 'hover:bg-purple-700');
        startButton.classList.add('bg-red-600', 'hover:bg-red-700');
      } else {
        startButton.classList.remove('bg-red-600', 'hover:bg-red-700');
        startButton.classList.add('bg-purple-600', 'hover:bg-purple-700');
      }
    }
  }

  function onAdjustScanSuccess(decodedText, decodedResult) {
    // Handle the scanned code
    console.log(`Code scanned: ${decodedText}`, decodedResult);
    
    // Set the input value
    document.getElementById('adjustBarcodeInput').value = decodedText;
    
    // Stop the scanner
    stopAdjustScanner();
    
    // Process the scanned item
    addAdjustScannedItem();
  }

  function onAdjustScanFailure(error) {
    // Handle scan failure, ignore frequent failures as they're normal during scanning
    // console.debug(`Scan error: ${error}`);
  }

  function closeAdjustBarcodeModal() {
    console.log('Closing adjust barcode modal');
    
    try {
      // Try to stop the scanner if it's running
      if (adjustQrCodeScanner) {
        stopAdjustScanner();
      }
    } catch (e) {
      console.error("Error while stopping scanner:", e);
      // Reset scanner variable even if stopping fails
      adjustQrCodeScanner = null;
    }
    
    document.getElementById('adjustBarcodeModal').classList.add('hidden');
    document.getElementById('adjustBarcodeInput').value = '';
  }

  function addAdjustScannedItem() {
    const barcodeInput = document.getElementById('adjustBarcodeInput');
    const barcode = barcodeInput.value.trim();
    
    if (!barcode) {
      barcodeInput.classList.add('border-red-500');
      setTimeout(() => {
        barcodeInput.classList.remove('border-red-500');
      }, 2000);
      return;
    }
    
    const teamId = document.querySelector('[data-stock-transaction-team-id-value]')
      .getAttribute('data-stock-transaction-team-id-value');
    
    fetch(`/teams/${teamId}/items/find_by_barcode?barcode=${encodeURIComponent(barcode)}`)
      .then(response => response.json())
      .then(data => {
        if (data.success && data.item) {
          const item = data.item;
          
          // Check if item is already in the list
          const existingRow = document.querySelector(`tr[data-item-id="${item.id}"]`);
          if (existingRow) {
            showToast(`${item.name} is already in the list`, "blue");
            closeAdjustBarcodeModal();
            return;
          }
          
          // Add new item to the list
          const template = document.querySelector('[data-stock-transaction-target="itemTemplate"]');
          const itemsList = document.querySelector('[data-stock-transaction-target="itemsList"]');
          
          if (template && itemsList) {
            const clone = template.content.cloneNode(true);
            const row = clone.querySelector('tr');
            
            row.dataset.itemId = item.id;
            row.querySelector('[data-item-name]').textContent = item.name;
            row.querySelector('[data-item-sku]').textContent = item.sku;
            row.querySelector('[data-current-stock]').textContent = item.current_stock;
            
            // Set default quantity to 1 instead of current stock
            const quantityInput = row.querySelector('[data-quantity]');
            quantityInput.value = 1;
            
            itemsList.appendChild(row);
            
            // Update total if needed
            const stockTransactionController = document.querySelector('[data-controller="stock-transaction"]').__stimulusController;
            if (stockTransactionController) {
              stockTransactionController.updateTotal();
            }
            
            showToast(`Added ${item.name} to list`, "green");
          }
          
          closeAdjustBarcodeModal();
        } else {
          showToast("Item not found", "red");
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast("Error searching for item", "red");
      });
  }
  
  // File handling functions
  function handleAdjustFileSelect(fileInput) {
    const files = fileInput.files;
    if (files.length === 0) {
      return;
    }
    
    const file = files[0];
    
    // Show loading state
    showToast("Processing image...", "blue");
    
    // Create a new Html5Qrcode instance if needed
    if (!adjustQrCodeScanner) {
      initAdjustScanner();
      
      // Need to wait for the scanner initialization
      setTimeout(() => {
        processAdjustFile(file);
      }, 500);
    } else {
      processAdjustFile(file);
    }
    
    // Reset the file input so the same file can be selected again
    fileInput.value = '';
  }
  
  function processAdjustFile(file) {
    // Make sure Html5Qrcode is available
    if (!window.Html5Qrcode) {
      loadHtml5QrcodeScript(() => processAdjustFile(file));
      return;
    }
    
    try {
      // Create a new Html5Qrcode instance just for file scanning
      // This avoids conflicts with the camera scanner
      const fileScanner = new Html5Qrcode("adjust-qr-reader");
      
      fileScanner.scanFile(file, true)
        .then(decodedText => {
          console.log(`Code scanned from file: ${decodedText}`);
          
          // Set the input value
          document.getElementById('adjustBarcodeInput').value = decodedText;
          
          // Clean up the file scanner before processing the item
          fileScanner.clear();
          
          // Process the scanned item
          addAdjustScannedItem();
        })
        .catch(error => {
          console.error("Error scanning file:", error);
          showToast("Could not detect any QR code in this image", "red");
          
          // Make sure to clean up even on error
          try {
            fileScanner.clear();
          } catch (e) {
            console.error("Error clearing file scanner:", e);
          }
        });
    } catch (error) {
      console.error("Error processing file:", error);
      showToast("Failed to process the image", "red");
    }
  }
  
  // Toast notification function (can be shared)
  function showToast(message, color = "green") {
    // Create toast element if it doesn't exist
    let toast = document.getElementById('toast-notification');
    if (!toast) {
      toast = document.createElement('div');
      toast.id = 'toast-notification';
      toast.className = 'fixed bottom-4 right-4 text-white px-4 py-2 rounded-lg shadow-lg transform transition-all duration-300 translate-y-20 opacity-0 z-50';
      document.body.appendChild(toast);
    }
    
    // Set background color based on the type
    toast.className = toast.className.replace(/bg-\w+-500/g, '');
    toast.classList.add(`bg-${color}-500`);
    
    // Set message and show toast
    toast.textContent = message;
    toast.classList.remove('translate-y-20', 'opacity-0');
    
    // Hide after 3 seconds
    setTimeout(() => {
      toast.classList.add('translate-y-20', 'opacity-0');
    }, 3000);
  }
  
  // Helper function to load the HTML5-QRCode script (can be shared)
  function loadHtml5QrcodeScript(callback) {
    if (window.Html5Qrcode) {
      if (callback) callback();
      return;
    }
    
    const script = document.createElement('script');
    script.src = 'https://unpkg.com/html5-qrcode@2.3.8/html5-qrcode.min.js';
    script.onload = callback;
    script.onerror = function() {
      console.error('Failed to load HTML5-QRCode library');
      showToast("Failed to load barcode scanner library", "red");
    };
    document.head.appendChild(script);
  }
</script>

<style>
  /* Styles for the HTML5 QR scanner */
  #qr-reader {
    width: 100%;
    min-height: 300px;
  }
  
  #qr-reader img {
    display: none; /* Hide the library's default logo */
  }
  
  #qr-reader__scan_region {
    position: relative;
  }
  
  #qr-reader__scan_region::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 240px;
    height: 240px;
    border: 2px solid #8b5cf6;
    border-radius: 8px;
    z-index: 10;
  }
  
  #qr-reader__status_span {
    background-color: #8b5cf6 !important;
    color: white !important;
  }
  
  #toast-notification {
    z-index: 9999;
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
  }
</style> 